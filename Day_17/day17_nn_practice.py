# -*- coding: utf-8 -*-
"""day17_nn_practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b0F683MoAbhPBY2HDb1344iq3aLHHNTy

### Import required libraries -
"""

import pandas as pd
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import matplotlib.pyplot as plt

"""### Read the dataset -"""

from google.colab import drive
drive.mount('/content/drive')
        
house_df = pd.read_csv("/content/drive/MyDrive/SureStartTrainingData/housepricedata.csv")
house_df.info()
house_df.head()

"""### Prepare the dataset -
Split the dataset into input features and labels, then scale and normalize the data, and finally split the dataset into training, validation, and testing sets.
"""

house_dataset = house_df.values

X = house_dataset[:,0:10]
Y = house_dataset[:,10]

# Normalize the X values into 0 to 1
min_max_scaler = preprocessing.MinMaxScaler()
X_scale = min_max_scaler.fit_transform(X)

X_train, X_val_and_test, Y_train, Y_val_and_test = train_test_split(X_scale, Y, test_size=0.3)
# Split the dataset again for a training, validation and testing set
X_val, X_test, Y_val, Y_test = train_test_split(X_val_and_test, Y_val_and_test, test_size=0.5)
print(X_train.shape, X_val.shape, X_test.shape, Y_train.shape, Y_val.shape, Y_test.shape)

"""### Define the model -"""

# Define the model - 3 layers (ReLu, ReLu, Sigmoid)
model = Sequential([
    Dense(32, activation='relu', input_shape=(10,)),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid'),
])
# Compile the model
model.compile(optimizer='sgd',
              loss='binary_crossentropy',
              metrics=['accuracy'])
print("Model defined and compiled!")

"""### Train the model -"""

# Train the moodel for 100 epochs -
hist = model.fit(X_train, Y_train,
          batch_size=32, epochs=100,
          validation_data=(X_val, Y_val))

"""### Evaluate the model and visualize the results -"""

model.evaluate(X_test, Y_test)[1]

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='upper right')
plt.show()

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='lower right')
plt.show()