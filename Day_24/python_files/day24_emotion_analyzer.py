# -*- coding: utf-8 -*-
"""day24_emotion_analyzer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16BJQSbiJlWOhNCAcESRbgLLtzCoac2WR

### Import required libraries -
"""

import librosa
import glob 
import librosa.display
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from matplotlib.pyplot import specgram
import tensorflow.keras
from tensorflow.keras.models import load_model
from tensorflow.keras.optimizers import RMSprop
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import LabelEncoder
import os

"""### Import the testing data (wav file) -"""

data, sampling_rate = librosa.load('/content/output10.wav')

plt.figure(figsize=(15, 5))
librosa.display.waveplot(data, sr=sampling_rate)

"""### Load the trained model -"""

# Import the model from the h5 file
# loaded_model = load_model('/content/Emotion_Voice_Detection_Model.h5')
# loaded_model.summary()

# loading json and creating model
from tensorflow.keras.models import model_from_json
with open('/content/model.json', 'r') as json_file:
  loaded_model_json = json_file.read()
loaded_model = model_from_json(loaded_model_json)
# load weights into new model
loaded_model.load_weights("/content/Emotion_Voice_Detection_Model.h5")

opt = RMSprop(lr=0.00001, decay=1e-6)
loaded_model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])
print("Loaded model from disk")

"""### Read and prepare audio data from the file -"""

#livedf= pd.DataFrame(columns=['feature'])
X, sample_rate = librosa.load('/content/output10.wav', res_type='kaiser_fast', duration=2.5,sr=22050*2,offset=0.5)
sample_rate = np.array(sample_rate)
mfccs = np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=13),axis=0)
featurelive = mfccs
livedf2 = pd.DataFrame(data=featurelive)
livedf2 = livedf2.stack().to_frame().T

print(livedf2)

"""### Make a prediction -"""

twodim= np.expand_dims(livedf2, axis=2)
livepreds = loaded_model.predict(twodim, 
                         batch_size=32, 
                         verbose=1)
livepreds

"""### Convert the prediction into a readable format -"""

prediction_classes = ["female_angry", "female_calm", "female_fearful", "female_happy", "female_sad", "male_angry", "male_calm", "male_fearful", "male_happy", "male_sad"]

livepreds1=livepreds.argmax(axis=1)
liveabc = livepreds1.astype(int).flatten()
print(f"Predicted emotion: {prediction_classes[liveabc[0]]}")